diff -uNr cs550-16s-proj2-base/defs.h cs550-16s-proj2-working/defs.h
--- cs550-16s-proj2-base/defs.h	2016-03-13 11:36:05.000000000 -0400
+++ cs550-16s-proj2-working/defs.h	2016-04-05 09:51:10.564746364 -0400
@@ -178,7 +178,7 @@
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
-
+void            pagefault(uint err_code);
 void flush_tlb_all(void); // CS550 project - memory management
 
 // number of elements in fixed-size array
diff -uNr cs550-16s-proj2-base/Makefile cs550-16s-proj2-working/Makefile
--- cs550-16s-proj2-base/Makefile	2016-03-13 11:43:38.000000000 -0400
+++ cs550-16s-proj2-working/Makefile	2016-04-08 09:26:06.674090436 -0400
@@ -51,7 +51,7 @@
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+QEMU = ~zhangy/t_bin/qemu-system-i386
 
 # Try to infer the correct QEMU
 ifndef QEMU
diff -uNr cs550-16s-proj2-base/trap.c cs550-16s-proj2-working/trap.c
--- cs550-16s-proj2-base/trap.c	2016-03-13 11:06:42.000000000 -0400
+++ cs550-16s-proj2-working/trap.c	2016-04-05 09:51:10.728743799 -0400
@@ -47,6 +47,9 @@
   }
 
   switch(tf->trapno){
+case T_PGFLT:
+     pagefault(tf->err);
+     break;
   case T_IRQ0 + IRQ_TIMER:
     if(cpu->id == 0){
       acquire(&tickslock);
diff -uNr cs550-16s-proj2-base/vm.c cs550-16s-proj2-working/vm.c
--- cs550-16s-proj2-base/vm.c	2016-03-13 11:06:42.000000000 -0400
+++ cs550-16s-proj2-working/vm.c	2016-04-08 09:22:15.000000000 -0400
@@ -9,6 +9,7 @@
 
 extern char data[];  // defined by kernel.ld
 pde_t *kpgdir;  // for use in scheduler()
+char pg_refcount[PHYSTOP >> PGSHIFT];
 struct segdesc gdt[NSEGS];
 
 // Set up CPU's kernel segment descriptors.
@@ -188,6 +189,7 @@
   mem = kalloc();
   memset(mem, 0, PGSIZE);
   mappages(pgdir, 0, PGSIZE, v2p(mem), PTE_W|PTE_U);
+  ++pg_refcount[v2p(mem) >> PGSHIFT];
   memmove(mem, init, sz);
 }
 
@@ -238,6 +240,7 @@
     }
     memset(mem, 0, PGSIZE);
     mappages(pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U);
+    ++pg_refcount[v2p(mem) >> PGSHIFT];
   }
   return newsz;
 }
@@ -264,8 +267,11 @@
       pa = PTE_ADDR(*pte);
       if(pa == 0)
         panic("kfree");
+      if(--pg_refcount[pa >> PGSHIFT] == 0)
+      {
       char *v = p2v(pa);
       kfree(v);
+     }
       *pte = 0;
     }
   }
@@ -274,6 +280,7 @@
 
 // Free a page table and all the physical memory pages
 // in the user part.
+
 void
 freevm(pde_t *pgdir)
 {
@@ -312,27 +319,32 @@
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
-  char *mem;
+  //char *mem;
 
   if((d = setupkvm()) == 0)
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-      panic("copyuvm: pte should exist");
+      panic("Pte not present");
     if(!(*pte & PTE_P))
-      panic("copyuvm: page not present");
+      panic("Page not present");
+	//Flag; Read-only
+    *pte &=~PTE_W;
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto bad;
-    memmove(mem, (char*)p2v(pa), PGSIZE);
-    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
+    //if((mem = kalloc()) == 0)
+     // goto bad;
+    //memmove(mem, (char*)p2v(pa), PGSIZE);
+    if(mappages(d, (void*)i, PGSIZE, pa, flags) < 0)
       goto bad;
+    ++pg_refcount[pa >> PGSHIFT];
   }
+  flush_tlb_all();
   return d;
 
 bad:
   freevm(d);
+  flush_tlb_all();
   return 0;
 }
 
@@ -377,10 +389,47 @@
   return 0;
 }
 
-//PAGEBREAK!
-// Blank page.
-//PAGEBREAK!
-// Blank page.
-//PAGEBREAK!
-// Blank page.
+void pagefault(uint err_code)
+{
+  uint va = rcr2();
+  uint pa;
+  pte_t *pte;
+  char *mem;
+
+  if(proc == 0){
+    cprintf("\nPAGEFAULT: No process in cpu:%d, cr2=0x%x\n", 
+            cpu->id, va);
+    panic("pagefault");
+  }
+  if(va >= KERNBASE || (pte = walkpgdir(proc->pgdir, (void*)va, 0)) == 0 
+         || !(*pte & PTE_P) || !(*pte & PTE_U)){
+    cprintf("\npid %d: Illegal memory access\n",proc->pid);
+    proc->killed = 1;
+    return;
+  }
+  
+  if(*pte & PTE_W){
+    cprintf("Error Code:: %x\t 0x%x\n", err_code, va);
+    panic("Pagefault. Not read-only\n");
+  }else{
+    pa = PTE_ADDR(*pte);
+    if(pg_refcount[pa >> PGSHIFT] == 1)
+      *pte |= PTE_W;
+    else if(pg_refcount[pa >> PGSHIFT] > 1) {
+      mem = kalloc();
+      if(mem == 0){
+        cprintf("Pagefault \nOut of Memory\n");
+	proc->killed = 1;
+	return;
+      }
+      memmove(mem, (char*)p2v(pa), PGSIZE);
+      --pg_refcount[pa >> PGSHIFT];
+      ++pg_refcount[v2p(mem) >> PGSHIFT];
+      *pte = v2p(mem) | PTE_P | PTE_W | PTE_U;
+    } else {
+      panic("\nPagefault\n");
+    }
+    flush_tlb_all();
+  }
+}
 
diff -uNr cs550-16s-proj2-base/xv6-cs550-Makefile.patch cs550-16s-proj2-working/xv6-cs550-Makefile.patch
--- cs550-16s-proj2-base/xv6-cs550-Makefile.patch	1969-12-31 19:00:00.000000000 -0500
+++ cs550-16s-proj2-working/xv6-cs550-Makefile.patch	2016-04-05 09:51:10.880741422 -0400
@@ -0,0 +1,12 @@
+diff -uNr xv6-cs550-base/Makefile xv6-cs550-base_myversion/Makefile
+--- xv6-cs550-base/Makefile	2015-01-27 16:35:49.000000000 -0500
++++ xv6-cs550-base_myversion/Makefile	2015-01-27 21:11:34.102845652 -0500
+@@ -51,7 +51,7 @@
+ endif
+ 
+ # If the makefile can't find QEMU, specify its path here
+-# QEMU = qemu-system-i386
++QEMU = ~zhangy/t_bin/qemu-system-i386
+ 
+ # Try to infer the correct QEMU
+ ifndef QEMU
